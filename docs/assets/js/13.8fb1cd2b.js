(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{421:function(e,t,r){"use strict";r.r(t);var s=r(56),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"express"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express"}},[e._v("#")]),e._v(" express")]),e._v(" "),r("h2",{attrs:{id:"参数解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参数解析"}},[e._v("#")]),e._v(" 参数解析")]),e._v(" "),r("h3",{attrs:{id:"_1-body-parse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-body-parse"}},[e._v("#")]),e._v(" 1. body-parse")]),e._v(" "),r("p",[e._v("body-parser是一个HTTP请求体解析中间件，使用这个模块可以解析JSON、Raw、文本、URL-encoded格式的请求体，Express框架中就是使用这个模块做为请求体解析中间件。\nbody-parser 与 原生解析对比\nNode.js 原生HTTP模块中，是将用户请求数据封装到了用于请求对象req中，该对象是一个IncomingMessage，该对象同时也是一个可读流对象。")]),e._v(" "),r("p",[r("strong",[e._v("参考资料")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/expressjs/body-parser",target:"_blank",rel:"noopener noreferrer"}},[e._v("body-parser"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"_2-multer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-multer"}},[e._v("#")]),e._v(" 2. multer")]),e._v(" "),r("p",[e._v("Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要用于上传文件。它是写在 busboy 之上非常高效。")]),e._v(" "),r("blockquote",[r("p",[e._v("注意: Multer 不会处理任何非 multipart/form-data 类型的表单数据。")])]),e._v(" "),r("p",[r("strong",[e._v("参考资料")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Multer"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"_3-原始数据解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-原始数据解析"}},[e._v("#")]),e._v(" 3. 原始数据解析")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function middleware (req, res, next) {\n  const chunks = [];\n  // 接收数据\n  req.on('data', buf => {\n    chunks.push(buf)\n  })\n\n  // 接收数据完成\n  req.on('end', () => {\n    let buffer = Buffer.concat(chunks);\n    console.log(buffer.toString('utf8'))\n    next();\n  })\n}\n\napp.post('/test/json', middleware, (req, res) => {\n  console.log('test data')\n  res.send('test data');\n})\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);