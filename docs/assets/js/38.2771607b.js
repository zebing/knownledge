(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{440:function(t,a,s){"use strict";s.r(a);var e=s(56),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("h2",{attrs:{id:"配置多个ssh-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置多个ssh-key"}},[t._v("#")]),t._v(" 配置多个ssh key")]),t._v(" "),s("p",[t._v("当有多个git账号的时候，比如一个github，用于自己进行一些开发活动，再来一个gitlab，一般是公司内部的git。这两者你的邮箱如果不同的话，就会涉及到一个问题，生成第二个git的key的时候会覆盖第一个的key，导致必然有一个用不了。")]),t._v(" "),s("h3",{attrs:{id:"_1-生成账号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成账号"}},[t._v("#")]),t._v(" 1. 生成账号")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('ssh-keygen -t rsa -f filename -C "name@qq.com"\n')])])]),s("p",[t._v("-t type:指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型")]),t._v(" "),s("p",[t._v("-C comment：提供一个新的注释")]),t._v(" "),s("p",[t._v("-b bits：指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits")]),t._v(" "),s("p",[t._v("-f filename:指定生成的密钥文件名字")]),t._v(" "),s("p",[t._v("ssh key生成之后，将 .pub 文件里的内容配置到git仓库")]),t._v(" "),s("h3",{attrs:{id:"_2-配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置文件"}},[t._v("#")]),t._v(" 2. 配置文件")]),t._v(" "),s("p",[t._v("新建配置文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("touch config\n")])])]),s("p",[t._v("然后按以下格式配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# github\nHost github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/github\nUser zebing\n# akulaku\nHost git.silvrr.com\nHostName git.silvrr.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/akulaku\nUser fuzebing\n")])])]),s("h3",{attrs:{id:"_3-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-测试"}},[t._v("#")]),t._v(" 3. 测试")]),t._v(" "),s("p",[t._v("输入以下命令测试")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ssh -T git@git.silvrr.com\n")])])]),s("p",[t._v("初次连接会出现如下提示，请输入yes")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("The authenticity of host 'git.silvrr.com (52.74.45.60)' can't be established.\nECDSA key fingerprint is SHA256:L1HNvdqRIKUVgB/YIQ7qgay9w6djnsNz+9X6NwlhuMY.\nAre you sure you want to continue connecting (yes/no)?\n")])])]),s("h2",{attrs:{id:"创建版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库"}},[t._v("#")]),t._v(" 创建版本库")]),t._v(" "),s("p",[s("code",[t._v("git init")])]),t._v(" "),s("h2",{attrs:{id:"版本回退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),s("h3",{attrs:{id:"回退commit-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回退commit-merge"}},[t._v("#")]),t._v(" 回退commit/merge")]),t._v(" "),s("p",[s("strong",[t._v("1. git reset --hard HEAD")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("--mixed \n意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作\n这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。\n\n\n--soft  \n不删除工作空间改动代码，撤销commit，不撤销git add . \n\n--hard\n删除工作空间改动代码，撤销commit，撤销git add . \n\n")])])]),s("p",[s("strong",[t._v("2. git revert")])]),t._v(" "),s("p",[t._v("it revert 撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销\n作为一次最新的提交")]),t._v(" "),s("ul",[s("li",[t._v("git revert HEAD                  撤销前一次 commit")]),t._v(" "),s("li",[t._v("git revert HEAD^               撤销前前一次 commit")]),t._v(" "),s("li",[t._v("git revert commit （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。")])]),t._v(" "),s("p",[t._v("git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，\n版本会递增，不影响之前提交的内容")]),t._v(" "),s("h2",{attrs:{id:"暂存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存"}},[t._v("#")]),t._v(" 暂存")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//  保存当前修改\ngit stash\n\n// 应用当前修改\ngit stash pop\n\n// 查看stash列表\ngit stash list\n\n// 从stash创建分支\ngit stash branch testchanges\n")])])]),s("h2",{attrs:{id:"删除文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),s("p",[s("code",[t._v("git rm filename")])]),t._v(" "),s("h2",{attrs:{id:"修改commit-信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改commit-信息"}},[t._v("#")]),t._v(" 修改commit 信息")]),t._v(" "),s("ul",[s("li",[t._v("修改最后一次提交")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git commit --amend\n")])])]),s("ul",[s("li",[t._v("修改多个提交信息")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git rebase -i HEAD~3\ngit commit --amend\n")])])]),s("h2",{attrs:{id:"从commit切出分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从commit切出分支"}},[t._v("#")]),t._v(" 从commit切出分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout -b new_branch commit_hash\n")])])]),s("h2",{attrs:{id:"git-pull-新仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-新仓库"}},[t._v("#")]),t._v(" git pull 新仓库")]),t._v(" "),s("p",[t._v("设置remote，拉取远程仓库，拒绝合并无关历史")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fatal: refusing to merge unrelated histories\n")])])]),s("p",[t._v("解决")]),t._v(" "),s("p",[t._v("在你操作命令后面加--allow-unrelated-histories")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git pull --allow-unrelated-histories\n")])])]),s("h2",{attrs:{id:"查看提交历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史"}},[t._v("#")]),t._v(" 查看提交历史")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git log -p -2 // 一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交：\ngit log --stat // 每次提交的简略的统计信息，你可以使用 --stat 选项：\ngit log --graph // 展示分支合并图\n")])])]),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2",target:"_blank",rel:"noopener noreferrer"}},[t._v("2.3 Git 基础 - 查看提交历史"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"git-仓库嵌套"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-仓库嵌套"}},[t._v("#")]),t._v(" git 仓库嵌套")]),t._v(" "),s("p",[t._v("在自己的仓库中clone了别人的demo，git add 无效。\n先在子仓库执行")]),t._v(" "),s("div",{staticClass:"language-dotnetcli extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("rm -rf .git\n")])])]),s("p",[t._v("然后在子仓库的父文件夹执行")]),t._v(" "),s("div",{staticClass:"language-dotnetcli extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git rm -rf --cached [子仓库文件夹名称]\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);