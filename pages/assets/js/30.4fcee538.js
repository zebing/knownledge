(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{428:function(e,n,t){"use strict";t.r(n);var r=t(56),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[e._v("#")]),e._v(" javascript")]),e._v(" "),t("h2",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[e._v("#")]),e._v(" 数据类型")]),e._v(" "),t("p",[e._v("最新的 ECMAScript 标准定义了 8 种数据类型:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("7 种 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"}},[e._v("原始类型"),t("OutboundLink")],1)]),e._v(" "),t("ol",[t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Boolean",target:"_blank",rel:"noopener noreferrer"}},[e._v("Boolean"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"}},[e._v("Number"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"}},[e._v("String"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"}},[e._v("BigInt"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol",target:"_blank",rel:"noopener noreferrer"}},[e._v("symbol"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Null",target:"_blank",rel:"noopener noreferrer"}},[e._v("Null"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/undefined",target:"_blank",rel:"noopener noreferrer"}},[e._v("Undefined"),t("OutboundLink")],1)])])])]),e._v(" "),t("li",[t("p",[e._v("和"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Object",target:"_blank",rel:"noopener noreferrer"}},[e._v("Object"),t("OutboundLink")],1)])])]),e._v(" "),t("h2",{attrs:{id:"作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[e._v("#")]),e._v(" 作用域")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("全局作用域")]),e._v("\n浏览器是window，node是global")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("函数作用域")]),e._v("\n函数作用域内，对外是封闭的，从外层的作用域无法直接访问函数内部的作用域")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("块级作用域")]),e._v("\n代码块里面声明的变量，代码块外面无法访问。es6语法。var声明仍然可以访问;")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("词法作用域")]),e._v("\n词法作用域，也叫静态作用域，它的作用域是指在词法分析阶段就确定了，不会改变。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("动态作用域")]),e._v("\n动态作用域是在运行时根据程序的流程信息来动态确定的，而不是在写代码时进行静态确定的。")])])]),e._v(" "),t("blockquote",[t("p",[e._v("需要明确的是，Javascript并不具有动态作用域，它只有词法作用域，简单明了。但是，它的 eval()、with、this机制某种程度上很像动态作用域，使用上要特别注意。")])]),e._v(" "),t("h2",{attrs:{id:"执行上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[e._v("#")]),e._v(" 执行上下文")]),e._v(" "),t("p",[e._v("当一段 JavaScript 代码在运行的时候，它实际上是运行在执行上下文中。下面3种类型的代码会创建一个新的执行上下文：")]),e._v(" "),t("ul",[t("li",[e._v("全局上下文是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于JavaScript 函数之外的任何代码而创建的。")]),e._v(" "),t("li",[e._v("每个函数会在执行的时候创建自己的执行上下文。这个上下文就是通常说的 “本地上下文”。")]),e._v(" "),t("li",[e._v("使用 eval() 函数也会创建一个新的执行上下文。")])]),e._v(" "),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 执行上下文 mdn"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000009041008",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解JavaScript执行上下文、函数堆栈、提升的概念"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[e._v("#")]),e._v(" 闭包")]),e._v(" "),t("p",[e._v("在函数A中返回一个函数B，并且函数B可以访问到函数A的变量。那么函数B就是闭包。")]),e._v(" "),t("blockquote",[t("p",[e._v("很多人对于闭包的解释可能是函数嵌套了函数，然后返回一个函数。其实这个解释是不完整的，就比如我下面这个例子就可以反驳这个观点。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n")])])]),t("p",[t("strong",[e._v("缺点")])]),e._v(" "),t("ol",[t("li",[t("p",[e._v("由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。")])]),e._v(" "),t("li",[t("p",[e._v("闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。")])])]),e._v(" "),t("p",[t("strong",[e._v("用途")])]),e._v(" "),t("ol",[t("li",[e._v("访问函数内部的变量")]),e._v(" "),t("li",[e._v("使变量长期保存在内存中")])]),e._v(" "),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("学习Javascript闭包（Closure）"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"事件委托"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件委托"}},[e._v("#")]),e._v(" 事件委托")]),e._v(" "),t("p",[t("strong",[e._v("概念")]),e._v("\n事件委托，通俗地来讲，就是把一个元素响应事件的函数委托到另一个元素。一般是它的父级或更外层元素。")]),e._v(" "),t("p",[t("strong",[e._v("原理")]),e._v("\n主要是通过事件冒泡机制来实现。过程为三个阶段：")]),e._v(" "),t("ol",[t("li",[e._v("事件捕获阶段")]),e._v(" "),t("li",[e._v("目标阶段")]),e._v(" "),t("li",[e._v("事件冒泡阶段\n"),t("img",{attrs:{src:"https://xiaoxinling.coding.net/api/project/7846264/files/21112064/imagePreview",alt:"图片"}})])]),e._v(" "),t("p",[t("strong",[e._v("基本实现")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<ul id='list'>\n    <li>li1</li>\n    <li>li2</li>\n    <li>li3</li>\n    <li>li4</li>\n    ...\n</ul>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.getElementById('list').addEventListener('click', function(e) {\n    var taget = e.target;\n    if (target.nodeName.toLocaleLowerCase() === 'li') {\n        console.log('li')\n    }\n})\n")])])]),t("p",[t("strong",[e._v("优点")])]),e._v(" "),t("ol",[t("li",[e._v("减少事件绑定，节约内存")]),e._v(" "),t("li",[e._v("减少dom更新操作，无需添加事件绑定")])]),e._v(" "),t("p",[t("strong",[e._v("缺点")])]),e._v(" "),t("ol",[t("li",[e._v("不支持onfocus，onBlur等事件")]),e._v(" "),t("li",[e._v("一旦层级过多，可能会被阻隔掉")])]),e._v(" "),t("h2",{attrs:{id:"事件循环机制-event-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制-event-loop"}},[e._v("#")]),e._v(" 事件循环机制 Event Loop")]),e._v(" "),t("p",[t("strong",[e._v("同步任务")]),e._v("\n主线程上排队执行的任务。js线程是单线程，同步任务执行完之后，才执行微任务，最后执行宏任务。执行宏任务的时候可能会产生微任务，会先执行微任务才执行剩下的宏任务。")]),e._v(" "),t("p",[t("strong",[e._v("宏任务")])]),e._v(" "),t("ul",[t("li",[e._v("setTimeout")]),e._v(" "),t("li",[e._v("setInterval")]),e._v(" "),t("li",[e._v("console.log")]),e._v(" "),t("li",[e._v("ajax")]),e._v(" "),t("li",[e._v("addEventListener事件监听")]),e._v(" "),t("li",[e._v("postMessage")])]),e._v(" "),t("p",[t("strong",[e._v("微任务")])]),e._v(" "),t("ul",[t("li",[e._v("promise")]),e._v(" "),t("li",[e._v("queueMicroTask")]),e._v(" "),t("li",[e._v("MutationObserver")]),e._v(" "),t("li",[e._v("Object.observe")]),e._v(" "),t("li",[e._v("process.nextTick(Node.js 环境)")])]),e._v(" "),t("p",[t("strong",[e._v("参考：")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Event Loop MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 JavaScript 中通过 queueMicrotask() 使用微任务 MD"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[e._v("#")]),e._v(" this")]),e._v(" "),t("p",[e._v("与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。")]),e._v(" "),t("p",[e._v("在绝大多数情况下，函数的调用方式决定了 this 的值（运行时绑定）。this 不能在执行期间被赋值，并且在每次函数被调用时 this 的值也可能会不同。ES5 引入了 bind 方法来设置函数的 this 值，而不用考虑函数如何被调用的。ES2015 引入了箭头函数，箭头函数不提供自身的 this 绑定（this 的值将保持为闭合词法上下文的值）。")]),e._v(" "),t("p",[t("strong",[e._v("参考：")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this",target:"_blank",rel:"noopener noreferrer"}},[e._v("this MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[e._v("#")]),e._v(" bind")]),e._v(" "),t("p",[e._v("bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。多次绑定，只有一次有效\n"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[e._v("bind MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj1 = { value: 1 }\nvar obj2 = { value: 2 }\nfunction addArguments(arg1, arg2) {\n    console.log(this)\n    return arg1 + arg2\n}\nvar firstBind = addArguments.bind(obj1, 10) // 创建新函数firstBind，绑定this到obj1， 并预设第一个参数为10\nvar secondBind = addArguments.bind(obj2, 20, 30)\nfirstBind(1, 2) // {value: 1} 12\nsecondBind(3,4) // { value: 2 } 50\n\nvar firstBind2 = firstBind.bind(obj2, 20) // 创建新函数firstBind2，已绑定过this，再次绑定obj2无效， 并预设第二个参数为20\nfirstBind2(1, 2) // {value: 1} 30\n")])])]),t("p",[t("strong",[e._v("手写bind")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Function.prototype.bind = function (context, ...args) {\n    if (typeof this !== 'function') {\n        throw new TypeError('Error')\n    }\n    //返回一个绑定this的函数，这里我们需要保存this\n    const _this = this\n        //返回一个函数\n    return function F() {\n        //因为返回一个函数，我们可以new F()需要判断能当做构造函数吗\n        if (this instanceof F) {\n            return new _this(...args, ...arguments)\n        }\n        return _this.apply(context, args.concat(...arguments))\n    }\n}\n\n")])])]),t("h2",{attrs:{id:"apply"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[e._v("#")]),e._v(" apply")]),e._v(" "),t("p",[e._v("apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",target:"_blank",rel:"noopener noreferrer"}},[e._v("apply MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("注意：call()方法的作用和 apply() 方法类似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。")])]),e._v(" "),t("p",[t("strong",[e._v("手写apply")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Function.prototype.myApply = function(context, args = []) {\n  context = context || window; // 参数默认值并不会排除null，所以重新赋值\n  context.fn = this; // this是调用call的函数\n  const result = context.fn(...args);\n  delete context.fn; // 执行后删除新增属性\n  return result;\n}\n")])])]),t("h2",{attrs:{id:"call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[e._v("#")]),e._v(" call")]),e._v(" "),t("p",[e._v("call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call",target:"_blank",rel:"noopener noreferrer"}},[e._v("call MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("注意：该方法的语法和作用与 apply() 方法类似，只有一个区别，就是 call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。")])]),e._v(" "),t("p",[t("strong",[e._v("手写call")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Function.prototype.myCall = function(context, ...args) {\n  context = context || window; // 参数默认值并不会排除null，所以重新赋值\n  context.fn = this; // this是调用call的函数\n  const result = context.fn(...args);\n  delete context.fn; // 执行后删除新增属性\n  return result;\n}\n")])])]),t("h2",{attrs:{id:"new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[e._v("#")]),e._v(" new")]),e._v(" "),t("p",[e._v("new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。")]),e._v(" "),t("p",[t("strong",[e._v("描述")]),e._v("\nnew 关键字会进行如下的操作：")]),e._v(" "),t("ol",[t("li",[e._v("创建一个空的简单JavaScript对象（即{}）；")]),e._v(" "),t("li",[e._v("链接该对象（设置该对象的constructor）到另一个对象 ；")]),e._v(" "),t("li",[e._v("将步骤1新创建的对象作为this的上下文 ；\n4.如果该函数没有返回对象，则返回this。")])]),e._v(" "),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new",target:"_blank",rel:"noopener noreferrer"}},[e._v("new 运算符 mdn"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"prototype-和-proto"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prototype-和-proto"}},[e._v("#")]),e._v(" prototype 和 "),t("strong",[e._v("proto")])]),e._v(" "),t("p",[t("strong",[e._v("prototype")]),e._v("\nObject.prototype 属性表示 Object 的原型对象。"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype",target:"_blank",rel:"noopener noreferrer"}},[e._v("prototype MDN 链接"),t("OutboundLink")],1),e._v("\n几乎所有的 JavaScript 对象都是 Object 的实例；一个典型的对象继承了Object.prototype的属性（包括方法），尽管这些属性可能被遮蔽（亦称为覆盖）。但是有时候可能故意创建不具有典型原型链继承的对象，比如通过Object.create(null)创建的对象，或者通过Object.setPrototypeOf方法改变原型链。")]),e._v(" "),t("p",[e._v("改变Object原型，会通过原型链改变所有对象；除非在原型链中进一步覆盖受这些变化影响的属性和方法。这提供了一个非常强大的、但有潜在危险的机制来覆盖或扩展对象行为。")]),e._v(" "),t("p",[t("strong",[t("strong",[e._v("proto")])]),e._v("\nObject.prototype 的 "),t("strong",[e._v("proto")]),e._v("  属性是一个访问器属性（一个getter函数和一个setter函数）, 暴露了通过它访问的对象的内部[[Prototype]] (一个对象或 null)。"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("proto")]),e._v(" MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("已废弃\n该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。")])]),e._v(" "),t("h2",{attrs:{id:"原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[e._v("#")]),e._v(" 原型")]),e._v(" "),t("p",[e._v("每个函数都有 "),t("code",[e._v("prototype")]),e._v(" 属性，除了 "),t("code",[e._v("Function.prototype.bind()")]),e._v("，该属性指向原型。")]),e._v(" "),t("p",[e._v("每个对象都有 "),t("code",[e._v("__proto__")]),e._v("属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 "),t("code",[e._v("_proto_")]),e._v("来访问。")]),e._v(" "),t("p",[e._v("对象可以通过 "),t("code",[e._v("__proto__")]),e._v("来寻找不属于该对象的属性，"),t("code",[e._v("__proto__")]),e._v(" 将对象连接起来组成了原型链。")]),e._v(" "),t("p",[e._v("如果你想更进一步的了解原型，可以仔细阅读 "),t("a",{attrs:{href:"https://github.com/KieSun/Dream/issues/2",target:"_blank",rel:"noopener noreferrer"}},[e._v("深度解析原型中的各个难点"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("对象原型 MDN"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[e._v("#")]),e._v(" 继承")]),e._v(" "),t("p",[e._v("JavaScript常用八种继承方案，在常用七种继承方案的基础之上增加了ES6的类继承。")]),e._v(" "),t("h3",{attrs:{id:"构造函数继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数继承"}},[e._v("#")]),e._v(" 构造函数继承")]),e._v(" "),t("p",[t("strong",[e._v("构造函数继承")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function  SuperType(){\n    this.color=["red","green","blue"];\n}\nfunction  SubType(){\n    //继承自SuperType\n    SuperType.call(this);\n}\nvar instance1 = new SubType();\ninstance1.color.push("black");\nalert(instance1.color);//"red,green,blue,black"\n\nvar instance2 = new SubType();\nalert(instance2.color);//"red,green,blue"\n')])])]),t("p",[t("strong",[e._v("缺点")])]),e._v(" "),t("ol",[t("li",[e._v("只能继承父类的实例属性和方法，不能继承原型属性/方法")]),e._v(" "),t("li",[e._v("无法实现复用，每个子类都有父类实例函数的副本，影响性能")])]),e._v(" "),t("h3",{attrs:{id:"原型链继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[e._v("#")]),e._v(" 原型链继承")]),e._v(" "),t("p",[t("strong",[e._v("原型链继承")]),e._v("\n原型链继承即重写原型对象")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function SuperType() {\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n    return this.property;\n}\n\nfunction SubType() {\n    this.subproperty = false;\n}\n\n// 这里是关键，创建SuperType的实例，并将该实例赋值给SubType.prototype\nSubType.prototype = new SuperType(); \n\nSubType.prototype.getSubValue = function() {\n    return this.subproperty;\n}\n\nvar instance = new SubType();\nconsole.log(instance.getSuperValue()); // true\n")])])]),t("p",[t("strong",[e._v("缺点")]),e._v("\n多个实例会对引用类型进行篡改")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function SuperType(){\n  this.colors = ["red", "blue", "green"];\n}\nfunction SubType(){}\n\nSubType.prototype = new SuperType();\n\nvar instance1 = new SubType();\ninstance1.colors.push("black");\nalert(instance1.colors); //"red,blue,green,black"\n\nvar instance2 = new SubType(); \nalert(instance2.colors); //"red,blue,green,black"\n')])])]),t("h3",{attrs:{id:"组合继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合继承"}},[e._v("#")]),e._v(" 组合继承")]),e._v(" "),t("p",[t("strong",[e._v("组合继承")]),e._v("\n原型链继承和构造函数继承相结合。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function SuperType(name){\n  this.name = name;\n  this.colors = ["red", "blue", "green"];\n}\nSuperType.prototype.sayName = function(){\n  alert(this.name);\n};\n\nfunction SubType(name, age){\n  // 继承属性\n  // 第二次调用SuperType()\n  SuperType.call(this, name);\n  this.age = age;\n}\n\n// 继承方法\n// 构建原型链\n// 第一次调用SuperType()\nSubType.prototype = new SuperType(); \n// 重写SubType.prototype的constructor属性，指向自己的构造函数SubType\nSubType.prototype.constructor = SubType; \nSubType.prototype.sayAge = function(){\n    alert(this.age);\n};\n\nvar instance1 = new SubType("Nicholas", 29);\ninstance1.colors.push("black");\nalert(instance1.colors); //"red,blue,green,black"\ninstance1.sayName(); //"Nicholas";\ninstance1.sayAge(); //29\n\nvar instance2 = new SubType("Greg", 27);\nalert(instance2.colors); //"red,blue,green"\ninstance2.sayName(); //"Greg";\ninstance2.sayAge(); //27\n')])])]),t("p",[t("strong",[e._v("缺点")]),e._v("\n由于存在两个调用，所以在实例和原型链上会存在两份相同的属性／方法\n"),t("img",{attrs:{src:"https://xiaoxinling.coding.net/api/project/7846264/files/21146924/imagePreview",alt:"图片"}})]),e._v(" "),t("h3",{attrs:{id:"原型式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型式继承"}},[e._v("#")]),e._v(" 原型式继承")]),e._v(" "),t("p",[t("strong",[e._v("原型式继承")]),e._v("\n利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。")]),e._v(" "),t("blockquote",[t("p",[e._v("Object.create() 可替代如下 object")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function object(obj){\n  function F(){}\n  F.prototype = obj;\n  return new F();\n}\nvar person = {\n  name: "Nicholas",\n  friends: ["Shelby", "Court", "Van"]\n};\n\nvar anotherPerson = object(person);\nanotherPerson.name = "Greg";\nanotherPerson.friends.push("Rob");\n\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = "Linda";\nyetAnotherPerson.friends.push("Barbie");\n\nalert(person.friends);   //"Shelby,Court,Van,Rob,Barbie"\n')])])]),t("p",[e._v("*"),t("em",[e._v("缺点")])]),e._v(" "),t("ol",[t("li",[e._v("原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。")]),e._v(" "),t("li",[e._v("无法继承多个对象参数")])]),e._v(" "),t("h3",{attrs:{id:"寄生式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#寄生式继承"}},[e._v("#")]),e._v(" 寄生式继承")]),e._v(" "),t("p",[t("strong",[e._v("寄生式继承")]),e._v("\n在原型式继承的基础上，增强对象，返回构造函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function object(obj){\n  function F(){}\n  F.prototype = obj;\n  return new F();\n}\n\nfunction createAnother(original){\n  var clone = object(original); // 通过调用 object() 函数创建一个新对象\n  clone.sayHi = function(){  // 以某种方式来增强对象\n    alert("hi");\n  };\n  return clone; // 返回这个对象\n}\n\n')])])]),t("p",[e._v("** 缺点*")]),e._v(" "),t("ol",[t("li",[e._v("原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。")]),e._v(" "),t("li",[e._v("无法继承多个对象参数")])]),e._v(" "),t("h3",{attrs:{id:"寄生组合继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合继承"}},[e._v("#")]),e._v(" 寄生组合继承")]),e._v(" "),t("p",[e._v("**寄生组合式继承 **\n结合借用 "),t("strong",[e._v("构造函数")]),e._v(" 传递参数和 "),t("strong",[e._v("寄生模式")]),e._v(" 实现继承")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function inheritPrototype(subType, superType){\n  var prototype = Object.create(superType.prototype); // 创建对象，创建父类原型的一个副本\n  prototype.constructor = subType;                    // 增强对象，弥补因重写原型而失去的默认的constructor 属性\n  subType.prototype = prototype;                      // 指定对象，将新创建的对象赋值给子类的原型\n}\n\n// 父类初始化实例属性和原型属性\nfunction SuperType(name){\n  this.name = name;\n  this.colors = ["red", "blue", "green"];\n}\nSuperType.prototype.sayName = function(){\n  alert(this.name);\n};\n\n// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）\nfunction SubType(name, age){\n  SuperType.call(this, name);\n  this.age = age;\n}\n\n// 将父类原型指向子类\ninheritPrototype(SubType, SuperType);\n\n// 新增子类原型属性\nSubType.prototype.sayAge = function(){\n  alert(this.age);\n}\n\nvar instance1 = new SubType("xyc", 23);\nvar instance2 = new SubType("lxy", 23);\n\ninstance1.colors.push("2"); // ["red", "blue", "green", "2"]\ninstance1.colors.push("3"); // ["red", "blue", "green", "3"]\n')])])]),t("p",[t("img",{attrs:{src:"/api/project/7846264/files/21162732/imagePreview",alt:"图片"}}),e._v("\n这个例子的高效率体现在它只调用了一次SuperType 构造函数，并且因此避免了在SubType.prototype 上创建不必要的、多余的属性。于此同时，原型链还能保持不变；因此，还能够正常使用instanceof 和isPrototypeOf()\n"),t("strong",[e._v("这是最成熟的方法，也是现在库实现的方法")])]),e._v(" "),t("h3",{attrs:{id:"混入方式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混入方式继承"}},[e._v("#")]),e._v(" 混入方式继承")]),e._v(" "),t("p",[t("strong",[e._v("混入方式继承")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function MyClass() {\n     SuperClass.call(this);\n     OtherSuperClass.call(this);\n}\n\n// 继承一个类\nMyClass.prototype = Object.create(SuperClass.prototype);\n// 混合其它\nObject.assign(MyClass.prototype, OtherSuperClass.prototype);\n// 重新指定constructor\nMyClass.prototype.constructor = MyClass;\n\nMyClass.prototype.myMethod = function() {\n     // do something\n};\n\n")])])]),t("p",[e._v("Object.assign会把 OtherSuperClass原型上的函数拷贝到 MyClass原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。")]),e._v(" "),t("h3",{attrs:{id:"class继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class继承"}},[e._v("#")]),e._v(" class继承")]),e._v(" "),t("p",[t("strong",[e._v("ES6 类继承")]),e._v("\nes6 类语法提供继承关键字 extends")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class SuperClass {\n    constructor(){\n        this.type = 'SuperClass'\n    }\n}\nclass SubClass extends SuperClass{\n    constructor(props) {\n        super(props);\n    }\n    sayType() {\n        console.log(this.type)\n    }\n}\n\nconst sub = new SubClass()\nsub.sayType() // SuperClass\n")])])]),t("p",[e._v("extends继承的核心代码如下，其实现和上述的寄生组合式继承方式一样")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function _inherits(subClass, superClass) {\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p; return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n")])])]),t("h2",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[e._v("#")]),e._v(" 模块化")]),e._v(" "),t("p",[t("strong",[e._v("JavaScript模块化")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"}},[e._v("模块化 MDN链接"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("命名冲突")]),e._v(" "),t("li",[e._v("提高代码可重用性")])]),e._v(" "),t("p",[e._v("** AMD 与 CMD：**")]),e._v(" "),t("p",[e._v("AMD是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD是 SeaJS 在推广过程中对模块定义的规范化产出。\nCMD推崇依赖就近，AMD推崇依赖前置。")]),e._v(" "),t("p",[t("strong",[e._v("ES Module与CommonJS:")])]),e._v(" "),t("p",[e._v("CommonJS模块是对象，是运行时加载，运行时才把模块挂载在exports之上（加载整个模块的所有），加载模块其实就是查找对象属性。\nES Module不是对象，是使用export显示指定输出，再通过import输入。此法为编译时加载，编译时遇到import就会生成一个只读引用。等到运行时就会根据此引用去被加载的模块取值。所以不会加载模块所有方法，仅取所需。\nCommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\nCommonJS 模块是运行时加载，ES6 模块是编译时输出接口")]),e._v(" "),t("p",[t("strong",[e._v("CommonJS与AMD/CMD:")])]),e._v(" "),t("p",[e._v("AMD/CMD是CommonJS在浏览器端的解决方案。\nCommonJS是同步加载（代码在本地，加载时间基本等于硬盘读取时间）。\nAMD/CMD是异步加载（浏览器必须这么做，代码在服务端）")]),e._v(" "),t("p",[e._v("** UMD与AMD/CMD**")]),e._v(" "),t("p",[e._v("UMD（Universal Module Definition）是AMD和CommonJS的糅合，跨平台的解决方案。\nAMD模块以浏览器第一的原则发展，异步加载模块。\nCommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。\nUMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/post/5b7d2f45e51d4538826f4c28",target:"_blank",rel:"noopener noreferrer"}},[e._v("博客链接"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"深浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深浅拷贝"}},[e._v("#")]),e._v(" 深浅拷贝")]),e._v(" "),t("p",[t("strong",[e._v("浅拷贝")]),e._v("\n可以通过 "),t("code",[e._v("Object.assign")]),e._v(" 来解决这个问题")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let a = {\n    age: 1\n}\nlet b = Object.assign({}, a)\na.age = 2\nconsole.log(b.age) // 1\n")])])]),t("p",[t("strong",[e._v("深拷贝")]),e._v("\n这个问题通常可以通过 JSON.parse(JSON.stringify(object)) 来解决。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let a = {\n    age: 1,\n    jobs: {\n        first: 'FE'\n    }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n")])])]),t("p",[t("strong",[e._v("问题：")])]),e._v(" "),t("ul",[t("li",[e._v("会忽略 undefined")]),e._v(" "),t("li",[e._v("会忽略 symbol")]),e._v(" "),t("li",[e._v("不能序列化函数")]),e._v(" "),t("li",[e._v("不能解决循环引用的对象")])]),e._v(" "),t("p",[t("strong",[e._v("手写深拷贝函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const clone = (data, hash = new WeakMap()) => {\n  // 对象\n  if (Object.prototype.toString.call(data) === '[object Object]') {\n    const target = {};\n    const value = hash.get(data);\n    if(value) return value;\n    hash.set(data, target);\n\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        target[key] = clone(data[key], hash);\n      }\n    }\n\n    return target;\n  }\n\n  // 数组\n  if (Object.prototype.toString.call(data) === '[object Array]') {\n    return data.map(item => clone(item, hash));\n  }\n\n  return data;\n}\n")])])]),t("h2",{attrs:{id:"防抖节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防抖节流"}},[e._v("#")]),e._v(" 防抖节流")]),e._v(" "),t("p",[t("strong",[e._v("防抖")]),e._v("\nDebounce 防抖： 最后一个人说了算。\n例如一个搜索框，在你输入关键词的过程中，会触发n次change事件，便会发起n次请求，造成不必要的性能损失。防抖就是为了解决这个问题。在输入关键词这个动作未完成之前，不会发起请求，直到输完之后才会发起请求。")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// fn是我们需要包装的事件回调, delay是每次推迟执行的等待时间")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("debounce")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" delay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 定时器")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" timer "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 将debounce处理结果当作函数返回")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" args "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" arguments\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 每次事件被触发时，都去清除之前的旧定时器")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("timer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("clearTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("timer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 设立新定时器")]),e._v("\n    timer "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("setTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" delay"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 用debounce来包装scroll的回调")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" better_scroll "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("debounce")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'触发了滚动事件'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n")])])]),t("p",[t("strong",[e._v("节流")]),e._v("\nThrottle 节流： 第一个人说了算")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function throttle(fn, delay) {\n  let timeout = null;\n  return function(...args) {\n    if (!timeout) {\n      timeout = setTimeout(() => {\n        fn(...args)\n        clearTimeout(timeout)\n        timeout = null\n      }, delay)\n    }\n  }\n}\n\n// 用Throttle来包装scroll的回调\nconst better_scroll = Throttle(() => console.log('触发了滚动事件'), 1000)\n\n")])])]),t("h2",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" promise")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/Yangfan2016/learn-translate/blob/master/1-Promises-A%2B_zh.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("【译】 Promises/A+ 规范"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("** Promise  状态**\npromise 一共有如下三种状态，只有在pending的时候才可改变")]),e._v(" "),t("ol",[t("li",[e._v("等待中（pending）")]),e._v(" "),t("li",[e._v("完成了 （resolved）")]),e._v(" "),t("li",[e._v("拒绝了（rejected）\n"),t("strong",[e._v("手写Promise")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function MyPromise(executor){\n  let self = this\n  self.value = undefined\n  self.reason = undefined\n  // 默认promise状态是pending\n  self.status = 'pending'\n  // 用来保存then 方法中，第一个参数\n  self.onResolvedCallbacks = []\n  // 用来保存then 方法中，第二个参数\n  self.onRejectedCallbacks = []\n  function resolve(value){\n    if(self.status === 'pending'){ //保证状态一旦变更，不能再次修改\n      self.value = value\n      self.status = 'resolved' // 成功状态\n      self.onResolvedCallbacks.forEach(fn => {\n        fn()\n      })\n    }\n  }\n  function reject(reason){\n    if(self.status === 'pending'){\n      self.reason = reason\n      self.status = 'rejected' //失败状态\n      self.onRejectedCallbacks.forEach(fn => {\n        fn()\n      })\n    }\n  }\n  executor(resolve, reject) // 因为会立即执行这个执行器函数\n}\n\nMyPromise.prototype.then = function(onFulfilled, onRejected){\n  let self = this\n  if(self.status === 'resolved'){\n    onFulfilled(self.value)\n  }\n  if(self.status === 'rejected'){\n    onRejected(self.reason)\n  }\n  if(self.status === 'pending'){\n  // 订阅\n    self.onResolvedCallbacks.push(function(){\n      onFulfilled(self.value)\n    })\n    self.onRejectedCallbacks.push(function(){\n      onRejected(self.reason)\n    })\n  }\n}\n")])])]),t("p",[t("strong",[e._v("完整版：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 三种状态\nconst PENDING = "pending";\nconst RESOLVED = "resolved";\nconst REJECTED = "rejected";\n// promise 接收一个函数参数，该函数会立即执行\nfunction MyPromise(fn) {\n  let _this = this;\n  _this.currentState = PENDING;\n  _this.value = undefined;\n  // 用于保存 then 中的回调，只有当 promise\n  // 状态为 pending 时才会缓存，并且每个实例至多缓存一个\n  _this.resolvedCallbacks = [];\n  _this.rejectedCallbacks = [];\n\n  _this.resolve = function (value) {\n    if (value instanceof MyPromise) {\n      // 如果 value 是个 Promise，递归执行\n      return value.then(_this.resolve, _this.reject)\n    }\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = RESOLVED;\n        _this.value = value;\n        _this.resolvedCallbacks.forEach(cb => cb());\n      }\n    })\n  };\n\n  _this.reject = function (reason) {\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = REJECTED;\n        _this.value = reason;\n        _this.rejectedCallbacks.forEach(cb => cb());\n      }\n    })\n  }\n  // 用于解决以下问题\n  // new Promise(() => throw Error(\'error))\n  try {\n    fn(_this.resolve, _this.reject);\n  } catch (e) {\n    _this.reject(e);\n  }\n}\n\nMyPromise.prototype.then = function (onResolved, onRejected) {\n  var self = this;\n  // 规范 2.2.7，then 必须返回一个新的 promise\n  var promise2;\n  // 规范 2.2.onResolved 和 onRejected 都为可选参数\n  // 如果类型不是函数需要忽略，同时也实现了透传\n  // Promise.resolve(4).then().then((value) => console.log(value))\n  onResolved = typeof onResolved === \'function\' ? onResolved : v => v;\n  onRejected = typeof onRejected === \'function\' ? onRejected : r => throw r;\n\n  if (self.currentState === RESOLVED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行\n      // 所以用了 setTimeout 包裹下\n      setTimeout(function () {\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === REJECTED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      setTimeout(function () {\n        // 异步执行onRejected\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === PENDING) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      self.resolvedCallbacks.push(function () {\n        // 考虑到可能会有报错，所以使用 try/catch 包裹\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n\n      self.rejectedCallbacks.push(function () {\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n    }));\n  }\n};\n// 规范 2.3\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用\n  if (promise2 === x) {\n    return reject(new TypeError("Error"));\n  }\n  // 规范 2.3.2\n  // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行\n  if (x instanceof MyPromise) {\n    if (x.currentState === PENDING) {\n      x.then(function (value) {\n        // 再次调用该函数是为了确认 x resolve 的\n        // 参数是什么类型，如果是基本类型就再次 resolve\n        // 把值传给下个 then\n        resolutionProcedure(promise2, value, resolve, reject);\n      }, reject);\n    } else {\n      x.then(resolve, reject);\n    }\n    return;\n  }\n  // 规范 2.3.3.3.3\n  // reject 或者 resolve 其中一个执行过得话，忽略其他的\n  let called = false;\n  // 规范 2.3.3，判断 x 是否为对象或者函数\n  if (x !== null && (typeof x === "object" || typeof x === "function")) {\n    // 规范 2.3.3.2，如果不能取出 then，就 reject\n    try {\n      // 规范 2.3.3.1\n      let then = x.then;\n      // 如果 then 是函数，调用 x.then\n      if (typeof then === "function") {\n        // 规范 2.3.3.3\n        then.call(\n          x,\n          y => {\n            if (called) return;\n            called = true;\n            // 规范 2.3.3.3.1\n            resolutionProcedure(promise2, y, resolve, reject);\n          },\n          e => {\n            if (called) return;\n            called = true;\n            reject(e);\n          }\n        );\n      } else {\n        // 规范 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 规范 2.3.4，x 为基本类型\n    resolve(x);\n  }\n}\n')])])]),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise MDN"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"generator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[e._v("#")]),e._v(" Generator")]),e._v(" "),t("p",[e._v("迭代器")]),e._v(" "),t("p",[e._v("function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i){\n  yield i;\n  yield* anotherGenerator(i);// 移交执行权\n  yield i + 10;\n}\n\nvar gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n")])])]),t("p",[t("strong",[e._v("源码实现")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 源码实现\nfunction createIterator(items) {\n    var i = 0\n    return {\n        next: function() {\n            var done = (i >= items.length)\n            var value = !done ? items[i++] : undefined\n            \n            return {\n                done: done,\n                value: value\n            }\n        }\n    }\n}\n\n// 应用\nconst iterator = createIterator([1, 2, 3])\nconsole.log(iterator.next())\t// {value: 1, done: false}\nconsole.log(iterator.next())\t// {value: 2, done: false}\nconsole.log(iterator.next())\t// {value: 3, done: false}\nconsole.log(iterator.next())\t// {value: undefined, done: true}\n")])])]),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*",target:"_blank",rel:"noopener noreferrer"}},[e._v("Generator MDN"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators",target:"_blank",rel:"noopener noreferrer"}},[e._v("迭代器和生成器"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"async-和-await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-和-await"}},[e._v("#")]),e._v(" async 和 await")]),e._v(" "),t("p",[e._v("示例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("async function getData() {\n  return 'data';\n}\n\nasync function test() {\n\tconst data = await getData();\n  \n  return data\n}\n\ntest();\n")])])]),t("p",[e._v("自码demo")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function* generator () {\n  const data = yield getData();\n  const data1 = yield getData();\n  return data;\n}\nfunction test() {\n  return new Promise((resolve, reject) => {\n    const gen = generator();\n    let step = gen.next();\n    while (!step.done) {\n      step = gen.next();\n    }\n    resolve(step.value);\n  });\n}\n")])])]),t("p",[e._v("babel生成")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch(error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function() {\n    var self = this,\n    args = arguments;\n    return new Promise(function(resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n      _next(undefined);\n    });\n  };\n}\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator(function * () {\n    return \'data\';\n  });\n  return _getData.apply(this, arguments);\n}\n\nfunction test() {\n  return _test.apply(this, arguments);\n}\n\nfunction _test() {\n  _test = _asyncToGenerator(function * () {\n    const data = yield getData();\n    return data;\n  });\n  return _test.apply(this, arguments);\n}\n\ntest();\n')])])]),t("h2",{attrs:{id:"proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[e._v("#")]),e._v(" proxy")]),e._v(" "),t("p",[e._v("Proxy 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）。")]),e._v(" "),t("p",[e._v("handler 对象的方法\nhandler 对象是一个容纳一批特定属性的占位符对象。它包含有 Proxy 的各个捕获器（trap）。")]),e._v(" "),t("p",[e._v("所有的捕捉器是可选的。如果没有定义某个捕捉器，那么就会保留源对象的默认行为。")]),e._v(" "),t("ul",[t("li",[e._v("handler.getPrototypeOf()\nObject.getPrototypeOf 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.setPrototypeOf()\nObject.setPrototypeOf 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.isExtensible()\nObject.isExtensible 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.preventExtensions()\nObject.preventExtensions 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.getOwnPropertyDescriptor()\nObject.getOwnPropertyDescriptor 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.defineProperty()\nObject.defineProperty 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.has()\nin 操作符的捕捉器。")]),e._v(" "),t("li",[e._v("handler.get()\n属性读取操作的捕捉器。")]),e._v(" "),t("li",[e._v("handler.set()\n属性设置操作的捕捉器。")]),e._v(" "),t("li",[e._v("handler.deleteProperty()\ndelete 操作符的捕捉器。")]),e._v(" "),t("li",[e._v("handler.ownKeys()\nObject.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。")]),e._v(" "),t("li",[e._v("handler.apply()\n函数调用操作的捕捉器。")]),e._v(" "),t("li",[e._v("handler.construct()\nnew 操作符的捕捉器。")])]),e._v(" "),t("h2",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),t("p",[e._v("Set对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的。")]),e._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" Map")]),e._v(" "),t("p",[e._v("Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Map 转化为数组\nArray.from(Map)\n\n// 数组转化为Map\nnew Map([['key','value']])\n")])])]),t("h2",{attrs:{id:"weakmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[e._v("#")]),e._v(" WeakMap")]),e._v(" "),t("p",[e._v("WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。")]),e._v(" "),t("p",[e._v("在 JavaScript 里，map API 可以通过使其四个 API 方法共用两个数组(一个存放键,一个存放值)来实现。给这种 map 设置值时会同时将键和值添加到这两个数组的末尾。从而使得键和值的索引在两个数组中相对应。当从该 map 取值的时候，需要遍历所有的键，然后使用索引从存储值的数组中检索出相应的值。")]),e._v(" "),t("p",[e._v("但这样的实现会有两个很大的缺点，首先赋值和搜索操作都是 O(n) 的时间复杂度( n 是键值对的个数)，因为这两个操作都需要遍历全部整个数组来进行匹配。另外一个缺点是可能会导致内存泄漏，因为数组会一直引用着每个键和值。这种引用使得垃圾回收算法不能回收处理他们，即使没有其他任何引用存在了。")]),e._v(" "),t("p",[e._v("相比之下，原生的 WeakMap 持有的是每个键对象的“弱引用”，这意味着在没有其他引用存在时垃圾回收能正确进行。原生 WeakMap 的结构是特殊且有效的，其用于映射的 key 只有在其没有被回收时才是有效的。")]),e._v(" "),t("p",[e._v("正由于这样的弱引用，WeakMap 的 key 是不可枚举的 (没有方法能给出所有的 key)。如果key 是可枚举的话，其列表将会受垃圾回收机制的影响，从而得到不确定的结果。因此，如果你想要这种类型对象的 key 值的列表，你应该使用 Map。")]),e._v(" "),t("p",[e._v("基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。")]),e._v(" "),t("h2",{attrs:{id:"node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" Node")]),e._v(" "),t("p",[e._v("Node 是一个接口，各种类型的 DOM API 对象会从这个接口继承。它允许我们使用相似的方式对待这些不同类型的对象；比如, 继承同一组方法，或者用同样的方式测试。")]),e._v(" "),t("p",[e._v("以下接口都从 Node 继承其方法和属性：")]),e._v(" "),t("p",[e._v("Document, Element, Attr, CharacterData (which Text, Comment, and CDATASection inherit), ProcessingInstruction (en-US), DocumentFragment, DocumentType, Notation, Entity, EntityReference\n在方法和属性不相关的特定情况下，这些接口可能返回 null。它们可能会抛出异常 - 例如，当将子节点添加到不允许子节点存在的节点时。")]),e._v(" "),t("p",[t("strong",[e._v("参考")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Node",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node NDN"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[e._v("#")]),e._v(" 正则表达式")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[e._v("正则表达式 MDN"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n.（小数点）默认匹配除换行符之外的任何单个字符。\n* 匹配前一个表达式 0 次或多次。等价于 {0,}。\n? 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。\n+ 匹配前面一个表达式 1 次或者多次。等价于 {1,}。\n")])])]),t("h2",{attrs:{id:"函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[e._v("#")]),e._v(" 函数式编程")]),e._v(" "),t("h3",{attrs:{id:"偏函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#偏函数"}},[e._v("#")]),e._v(" 偏函数")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Partial_application",target:"_blank",rel:"noopener noreferrer"}},[e._v("偏函数"),t("OutboundLink")],1),e._v("\n在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。")]),e._v(" "),t("p",[t("strong",[e._v("例子")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function partial(fn,a){\n    return function(b,c){\n        return fn(a,b,c);\n    }\n}\n\nfunction add(a, b) {\n    return a + b;\n}\n\n// 执行 add 函数，一次传入两个参数即可\nadd(1, 2) // 3\n\n// 假设有一个 partial 函数可以做到局部应用\nvar addOne = partial(add, 1);\n\naddOne(2) // 3\n")])])]),t("h3",{attrs:{id:"柯里化函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#柯里化函数"}},[e._v("#")]),e._v(" 柯里化函数")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[e._v("柯里化"),t("OutboundLink")],1),e._v("（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。")]),e._v(" "),t("p",[t("strong",[e._v("例子")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function multiply(a) {\n    return (b) => {\n        return (c) => {\n            return a * b * c\n        }\n    }\n}\nmultiply(1)(2)(3) // 6\n")])])]),t("h3",{attrs:{id:"高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[e._v("#")]),e._v(" 高阶函数")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("高阶函数"),t("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=a.exports}}]);